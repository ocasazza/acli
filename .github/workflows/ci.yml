name: 'CI/CD'
on:
  pull_request:
    branches: ['main']
  push:
    branches: ['main']

jobs:
  omnix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-24.04
          - ubuntu-22.04
          - ubuntu-22.04-arm
          - ubuntu-24.04-arm
          - macos-latest
          - macos-14
          - macos-15
          - macos-13
          - windows-latest
          - windows-2025
          - windows-2022
          - windows-11-arm
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - name: Install omnix
        run: nix --accept-flake-config profile install "github:juspay/omnix"
      - name: Debug system info
        run: |
          echo "System: $(uname -a)"
          echo "Nix version: $(nix --version)"
          echo "Om version: $(om --version)"
          echo "Available systems: $(nix eval --impure --expr 'builtins.currentSystem')"
      - name: Run omnix CI
        run: om ci --verbose
      - run: nix run .#update-repo-info
      - name: collect artifacts from om build into an "artifacts/" folder
        run: nix run .#get-build-artifacts
      - name: Upload all build artifacts (combined)
        uses: actions/upload-artifact@v4
        with:
          name: nix-builds-${{ matrix.os }}
          path: artifacts/
          retention-days: 7
          compression-level: 6

  pages:
    needs: omnix
    if: ${{ needs.release.outputs.releases_created == 'true' }}
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nix-builds-ubuntu-latest
          path: artifacts/
      - name: Configure GitHub pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Prepare documentation from artifacts
        run: |
          # Extract documentation from crane-template-doc artifact
          mkdir -p target/doc/rustdoc
          if [ -d "artifacts/acli-doc" ]; then
            cp -r artifacts/acli-doc/*acli-doc*/* target/doc
          fi

      - name: Upload GitHub Pages content
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/doc

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
